* Introduction

Pygen is a package that allows the user to automatically generate
Python code.  This allows programmers to code first and worry about
implementation details later.

Some of this functionality is implemented by [[https://github.com/python-rope/ropemacs][Ropemacs]]. However,
Ropemacs is slow and will not work if there are syntax errors in your
code.  Pymacs is faster and more robust against irrelevant syntax
errors at the cost of being less precise.  In some situations, it
won't know where to generate code.  Both packages can be used
alongside one another.

* TODO Installation
:LOGBOOK:
- State "TODO"       from              [2016-10-16 Sun 17:54]
:END:

This section still needs to be completed. Installation should shortly
be available on MELPA.

* Dependencies

Pygen leverages [[https://github.com/jorgenschaefer/elpy][Elpy]] and [[https://launchpad.net/python-mode][python-mode]].  That's the package called
=python-mode= - not the mode itself.  As of Emacs 24.5.1,
=python-mode= is not the default Python mode but a separate package.
The default package is =python.el=.

Pygen won't work with a Python setup unless python-mode is installed.
However, it can work with a setup that doesn't include Elpy.  You just
need to tell it how to navigate to function and class definitions.  By
default, this is handled by the command =elpy-goto-definition= to
navigate to definitions and the command =pop-tag-mark=.  If you use a
different system to navigate through python code, you can set the
variable =pygen-navigate-to-definition-command= to a different
functions.

* Commands
It provides the following code generation commands.  Scroll down for
animated examples.

| Command                           | Keychord  | Description                                                                                                                                                   |
|-----------------------------------+-----------+---------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =pygen-generate-class=            | ~C-c C-= c~ | Generate a python class from the reference under point.                                                                                                       |
| =pygen-generate-function=         | ~C-c C-= f~ | Generate a python function from the reference under point.                                                                                                    |
| =pygen-generate-static-function=  | ~C-c C-= s~ | Generate a static python function from the reference under point.                                                                                             |
| =pygen-extract-variable=          | ~C-c C-= v~ | Extract the current region into a variable.                                                                                                                   |
| =pygen-make-keyword-argument=     | ~C-c C-= k~ | Adds a keyword argument to the current function.                                                                                                              |
| =pygen-make-sequence-argument=    | ~C-c C-= a~ | Adds a sequence argument to the current function.                                                                                                             |
| =pygen-add-decorator-to-function= | ~C-c C-= @~ | Adds a decorator in front of the current function.                                                                                                            |
| =pygen-selfify-symbol=            | N/A       | Puts the word =self.= in front of the current symbol.                                                                                                         |
| =pygen-unselfify-symbol=          | N/A       | Removes the word =self.= from the current symbol (if it exists).                                                                                              |
| =pygen-toggle-selfify-symbol=     | ~C-c C-= .~ | Toggles the word =self= in front of the current symbol.                                                                                                       |
| =pygen-insert-super=              | ~C-c C-= u~ | Inserts a proper call to the current method in the superclass.  This is basically a wrapper for the built-in =python-mode= function that does the same thing. |

** Examples

Note that these examples are still being developed.

*** Generating Classes & Functions

**** pygen-generate-class
~C-c C-= c~ - Generate a python class from the reference under point.
#+CAPTION: ~C-c C-= c~ - Generate a python class from the reference under point.
[[./gifs/pygen-generate-class.gif]]

It also works on member classes.
#+CAPTION: It also works on member classes.
[[./gifs/pygen-generate-class-self.gif]]

**** pygen-generate-function
~C-c C-= f~ - Generate a python function from the reference under point.
#+CAPTION: ~C-c C-= f~ - Generate a python function from the reference under point.
[[./gifs/pygen-generate-function.gif]]

It also works on member functions.
#+CAPTION: It also works on member functions.
[[./gifs/pygen-generate-function-self.gif]]

**** pygen-generate-static-function
~C-c C-= s~ - Generate a static python function from the reference under point.
#+CAPTION: ~C-c C-= s~ - Generate a static python function from the reference under point.
[[./gifs/pygen-generate-static-function.gif]]

*** Generating Variables

**** pygen-extract-variable
~C-c C-= v~ - Extract the current region into a variable.
#+CAPTION: ~C-c C-= v~ - Extract the current region into a variable.
[[./gifs/pygen-extract-variable.gif]]

**** pygen-make-keyword-argument
~C-c C-= k~ - Adds a keyword argument to the current function.
#+CAPTION: ~C-c C-= k~ - Adds a keyword argument to the current function.
[[./gifs/pygen-make-keyword-argument.gif]]

**** pygen-make-sequence-argument
~C-c C-= a~ - Adds a sequence argument to the current function.
#+CAPTION: ~C-c C-= a~ - Adds a sequence argument to the current function.
[[./gifs/pygen-make-sequence-argument.gif]]

*** Automatic Decorators

**** pygen-add-decorator-to-function
~C-c C-= @~ - Adds a decorator in front of the current function.
#+CAPTION: ~C-c C-= @~ - Adds a decorator in front of the current function.
[[./gifs/pygen-add-decorator-to-function.gif]]

*** Modifying the "self" keyword:

**** pygen-selfify-symbol
Puts the word =self.= in front of the current symbol.

**** pygen-unselfify-symbol
Removes the word =self.= from the current symbol (if it exists).

**** pygen-toggle-selfify-symbol
~C-c C-= .~ - Toggles the =self.= keyword in front of the current symbol.
#+CAPTION: ~C-c C-= .~ - Toggles the =self.= keyword in front of the current symbol.
[[./gifs/pygen-toggle-selfify-symbol.gif]]

*** Dynamic Boilerplate Code Generation

**** pygen-insert-super
~C-c C-= u~ - Inserts a proper call to the current method in the superclass.
#+CAPTION: ~C-c C-= u~ - Inserts a proper call to the current method in the superclass.
[[./gifs/pygen-insert-super.gif]]
